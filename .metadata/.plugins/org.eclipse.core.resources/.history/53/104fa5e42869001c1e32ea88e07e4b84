

Application Architecture :

Controller <-> Service <-> DAO <-> Database

Code snippet in DAO layer

public void addAccount() {		
	System.out.println(getClass() + ": DOING MY DB WORK: ADDING AN ACCOUNT");
}

New Requirement - Logging:
Need to add logging to our DAO method
	Add some logging statements before the start of the method
	
New Requirement - Security:
Need to add security to our DAO method
	Make sure user is authorized before running the DAO method


public void addAccount() {
	// add code for logging		
	// add code for security
	System.out.println(getClass() + ": DOING MY DB WORK: ADDING AN ACCOUNT");
}

add the Logging & security to all the layers & in the entire system

Two main problems :
Code Scattering - if we need to change logging or security code, we have to update to all classes. 
Code tangling is when a specific piece of code performs multiple functions.

Aspect Oriented Programming (AOP):
----------------------------------
AOP breaks the program logic into distinct parts (called concerns). 
It is used to increase modularity(individual modules to be developed) by cross-cutting concerns.

A cross-cutting concern is a concern that can affect the whole application and 
should be centralized in one location in code as possible, 
such as transaction management, authentication, logging, security etc.

Additional AOP Use Cases
• Most common
	• logging, security, transactions
• Audit logging
	• who, what, when, where
• Exception handling
	• log exception and notify DevOps team via SMS/email
• API Management
	• how many times has a method been called user
	• analytics: what are peak times? what is average load? who is top user
	
	
AOP Concepts and Terminology
Aspect : Aspect is a concern that we are trying to implement generically
Example : logging

Pointcut(regular expression) : A predicate expression where advice should be applied  
Example : ("execution(public void addAccount())")

pointcut expression language:
execution(modifier-pattern? return-type-pattern declare-type-pattern?method-name-pattern(param-pattern) throws pattern?)

modifier-pattern : Spring AOP only supports public
return-type-pattern : void,boolean,String
declare-type-pattern - the class name
method-name-pattern - method name to match
param-pattern - parameters to match
throws pattern - exceptional

The pattern is optional if it has "?"
modifier-pattern? , declare-type-pattern? , pattern? is optional in pointcut expression language


Match only addAcount method in AccountDAO class
("execution(public void com.spring.demo.aop.dao.AccountDAO.addAccount())")

Match any addAcount method in any class
("execution(public void addAccount())")


Advice : what to be done when a pointcut matches

@Before("execution(public void addAccount())") //pointcut
public void beforeAddAccountAdvice() {
		System.out.println("\n=====>>> Executing @Before advice on addAccount()");	//advice	
}

Join point
Join point is any point in your program such as method execution, exception handling, 
field access etc. Spring supports only method execution join point.

Problem :
When we are in an aspects (ie for logging)
	How can we access method parameters
		Account myAccount = new Account();
		theAccountDao.addAccount(myAccount,true);
		
Step1 : Access & display method signature
	@Before("")
	public void beforeAddAccountAdvice(Jointpoint jointpoint) // Jointpoint contains the metedata about the method call
		{
			MethodSignature methodSignature =(MethodSignature)jointpoint.getSignature();
			sysout("methodSignature: "+methodSignature)
		}
		
output : 
weaving : Weaving
It is the process of linking aspect with other application types or objects to create an advised object. 
Weaving can be done at compile time, load time or runtime. 
Spring AOP performs weaving at runtime.

	
 